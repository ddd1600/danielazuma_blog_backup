<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var b=window,e="chrome",g="tick",h="wtsrt_",l="tbsd_",m="tbnd_",n="start",p="_wtsrt",q="_tbnd",r="CSI/";(function(){function k(a){this.t={};this.tick=function(a,d,c){this.t[a]=[void 0!=c?c:(new Date).getTime(),d];if(void 0==c)try{b.console.timeStamp(r+a)}catch(f){}};this[g](n,null,a)}var a;b.performance&&(a=b.performance.timing);var s=a?new k(a.responseStart):new k;b.jstiming={Timer:k,load:s};if(a){var d=a.navigationStart,f=a.responseStart;0<d&&f>=d&&(b.jstiming.srt=f-d)}if(a){var c=b.jstiming.load;0<d&&f>=d&&(c[g](p,void 0,d),c[g](h,p,f),c[g](l,h))}try{a=null,b[e]&&b[e].csi&&(a=Math.floor(b[e].csi().pageT),
c&&0<d&&(c[g](q,void 0,b[e].csi().startE),c[g](m,q,d))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,c&&0<d&&(c[g](q,void 0,b.external.startE),c[g](m,q,d))),a&&(b.jstiming.pt=a)}catch(t){}})(); })()
</script>
<link rel="shortcut icon" type="image/x-icon" href="//www.google.com/images/icons/product/sites-16.ico" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/d3f591/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d=window,e="length",h="",k="__duration__",l="function";function m(c){return document.getElementById(c)}d.byId=m;function n(c){return c.replace(/^\s+|\s+$/g,h)}d.trim=n;var p=[],q=0;d.JOT_addListener=function(c,a,b){var f=new String(q++);c={eventName:c,handler:a,compId:b,key:f};p.push(c);return f};d.JOT_removeListenerByKey=function(c){for(var a=0;a<p[e];a++)if(p[a].key==c){p.splice(a,1);break}};d.JOT_removeAllListenersForName=function(c){for(var a=0;a<p[e];a++)p[a].eventName==c&&p.splice(a,1)};
d.JOT_postEvent=function(c,a,b){var f={eventName:c,eventSrc:a||{},payload:b||{}};if(d.JOT_fullyLoaded)for(a=p[e],b=0;b<a&&b<p[e];b++){var g=p[b];g&&g.eventName==c&&(f.listenerCompId=g.compId||h,(g=typeof g.handler==l?g.handler:d[g.handler])&&g(f))}else d.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};d.JOT_delayedEvents=[];d.JOT_fullyLoaded=!1;
d.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var f=0;60<=b&&(b/=60,f=2);2<=b&&f++;return a?d.JOT_siteRelTimeStrs[f].replace(k,Math.floor(b)):d.JOT_userRelTimeStrs[f].replace(k,Math.floor(b))}; })()
</script>
<script>


var webspace = {"scottyUrl":"/_/upload","isConsumer":false,"canPublishScriptToAnyone":true,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"sharingUrlPrefix":"/_/sharing","csiReportUri":"http://csi.gstatic.com/csi","sharingPolicy":"OPENED","analyticsAccountId":"","baseUri":"","name":"blog","domain":"daniel-azuma.com","features":{"horizontalNavLayout":true,"asyncPermanentDelete":false,"ritzSupport":true,"folderEmbed":true,"moreBackgroundTweaks":true,"flipFolderUrls":true,"animateNavigation":true,"driveInFileCabinet":true,"skiThemeIsDefault":true,"pdfEmbedSupport":false,"animateToc":true,"siteChromeSidebarWidgetsEditDialog":true,"canonicalLinkTagInHead":true,"analyticsTrackingForCorp":false,"driveImageEmbed":true,"siteChromeSystemFooterDialog":true,"plusOneButtonOptions":true,"plusOneButton":true,"adSenseDeprecate":true,"photoAlbumsInOnePick":true,"docosHideNotificationSettings":true,"helpBox":true,"siteNotice":true,"skiTheme":true,"siteChromeDialogsToolbar":true,"ritzChartSupport":true,"plusBadge":false,"siteChromeHorizontalNavigationDialog":true,"youTubeEmbedSize":true,"adSenseDeprecateMsg":true,"htmlEmbed":true,"plusPost":true,"photoAlbumsGPlusUrlSupport":true,"siteChromeHeaderDialog":true,"fileCabinetOptions":true,"sitesLoveFixes":true},"adsensePublisherId":null,"gvizVersion":1,"siteTitle":"Daniel Azuma","pageSharingId":"jotspot_page","plusPageId":"","onepickBaseUrl":"https://docs.google.com","siteNoticeRevision":null,"termsUrl":"http://sites.google.com/site/sites/system/app/pages/meta/terms?apps\u003d1","enableAnalytics":false,"isPublic":true,"siteNoticeMessage":null,"plusPageUrl":"","homePath":"/","sharingId":"jotspot","isAdsenseEnabled":true,"adsensePromoClickedOrSiteIneligible":true,"isStartPageEnabled":true,"domainAnalyticsAccountId":""};



webspace.gadgets = {"baseUri":"/system/app/pages/gadgets"};


webspace.user = {"uid":"","renderMobile":false,"primaryEmail":"guest","sessionIndex":"","namespaceUser":false,"displayNameOrEmail":"guest","namespace":"","hasAdminAccess":false,"guest_":true,"keyboardShortcuts":true,"domain":"","hasWriteAccess":false,"dasherUser":false,"userName":"guest"};

webspace.page = {"canDeleteWebspace":null,"locale":"en","state":"","wuid":"wuid:gx:538f6eeef4c76cfc","pageInheritsPermissions":null,"timeZone":"America/Los_Angeles","properties":{},"type":"text","canChangePath":true,"parentWuid":"wuid:gx:63933589a24d6669","revision":5,"title":"Part 7","isRtlLocale":false,"bidiEnabled":false,"siteLocale":"en","name":"part-7","path":"/articles/georails/part-7","isSiteRtlLocale":false,"parentPath":"/articles/georails"};
webspace.page.breadcrumbs = [{"title":"Articles","dir":"ltr","path":"/articles","deleted":false},{"title":"GeoRails","dir":"ltr","path":"/articles/georails","deleted":false},{"title":"Part 7","dir":"ltr","path":"/articles/georails/part-7","deleted":false}];


webspace.editorResources = {
  text: [
    'http://www.gstatic.com/sites/p/d3f591/system/js/codemirror.js',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/codemirror_css.css',
    'http://www.gstatic.com/sites/p/d3f591/system/js/trog_edit__en.js',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/trogedit.css',
    '/_/rsrc/1399440112000/system/app/css/editor.css',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/codeeditor.css',
    '/_/rsrc/1399440112000/system/app/css/camelot/editor-jfk.css'
  ],
  sitelayout: [
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/sitelayouteditor.css'
  ]
};

var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/d3f591/system/app/images/cleardot.gif';


var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];


webspace.siteTemplateId = false;


webspace.page.currentTemplate = {"title":"Web Page","path":"/system/app/pagetemplates/text"};



var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Part 7 - Daniel Azuma" />
<meta itemprop="name" content="Part 7 - Daniel Azuma" />
<meta property="og:title" content="Part 7 - Daniel Azuma" />
<style type="text/css">
      
      @font-face {
  font-family: 'Limelight';
  font-style: normal;
  font-weight: 400;
  src: local('Limelight'), url('//themes.googleusercontent.com/static/fonts/limelight/v5/kD_2YDkzv1rorNqQ2oFK5qCWcynf_cDxXwCLxiixG1c.ttf') format('truetype');
}

    
    </style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/d3f591/system/app/themes/simple/standard-css-simple-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1399440112000/system/app/css/overlay.css?cb=simple20a960px158210goog-ws-nav-rightnone30topstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1399440112000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Part 7 - Daniel Azuma</title>
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<script src="//www.gstatic.com/caja/5678/caja.js"> </script>
<script src="http://www.gstatic.com/sites/p/d3f591/system/js/jot_caja.js"> </script>
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="sites-chrome-header-valign-top" style="height: 158px"><div class="sites-header-cell-buffer-wrapper"><h2></h2></div></td><td class="sites-layout-searchbox sites-chrome-header-valign-top"><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container">
<div class="sites-header-nav"><ul class="sites-header-nav-container-tabs"><li class="unselected"><a class="sites-navigation-link unselected" href="/updates">Home</a></li><li class="unselected"><a class="sites-navigation-link unselected" href="/contact">Contact</a></li></ul><div style="clear: both;"></div></div>
</td>
</tr>
</table> 
</div> 
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-canvas-wrapper">
<div id="sites-canvas">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="display: none;">
<A dir="ltr" href="/articles">Articles</A>‎ &gt; ‎<A dir="ltr" href="/articles/georails">GeoRails</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="display: none;" align="left">
<span id="sites-page-title" dir="ltr">Part 7</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><h1><a name="TOC-Geo-Rails-Part-7:-Geometry-vs.-Geography-or-How-I-Learned-To-Stop-Worrying-And-Love-Projections"></a>Geo-Rails Part 7: Geometry vs. Geography, or, How I Learned To Stop Worrying And Love Projections</h1>
<p><em>Originally published Jan 9, 2012</em></p>
<p>
This week we're going to look at how to choose a coordinate system for your database. In PostGIS, this includes the choice of geometry vs geography columns, as well as which projection (if any) to use, and how to interact with it from Rails.
</p>
<p>
In this article, we'll:
</p>
<ul>
<li>Review geographic and projected coordinate systems</li>
<li>Discuss the pros and cons of using the PostGIS geographic type</li>
<li>See why I typically store data in a projection</li>
<li>Look at some specific projections I recommend using (or avoiding)</li>
<li>Learn how to handle projected data in Rails</li>
</ul>
<p>
My original series plan for this week called for a worked example of a location-based web service, bringing together much of the material that we've covered so far. But as I was writing it, I realized there was one more topic we probably ought to cover first. So I'll publish the example next week.
</p>
<p>
This is part 7 of my continuing series of articles on geospatial programming in Ruby and Rails. For a list of the other installments, please visit <a href="http://daniel-azuma.com/articles/georails" target="_blank" title="Geo-Rails series">http://daniel-azuma.com/articles/georails</a>.
</p>
<h2><a name="TOC-A-tale-of-two-coordinate-systems"></a>A tale of two coordinate systems</h2>
<p>
In <a href="http://daniel-azuma.com/articles/georails/part-4" target="_blank" title="Geo-Rails part 4">part 4</a>, we took a first look at coordinate systems. We saw that coordinate systems are different ways of assigning <em>meaning</em> to coordinate values. Or, put another way, any particular meaning (such as a location) can be described in multiple ways. Each of those ways would use a different set of values, according to a different coordinate system.
</p>
<p>
Locations on the earth's surface are typically specified using one of two general types of coordinate systems: <em>geographic</em> coordinate systems and <em>projected</em> coordinate systems. Geographic coordinate systems usually use some notion of latitude and longitude, measuring angles along the surface of the earth. They are also embedded in a curved domain. What this means is, you can't technically show latitude and longitude on a flat piece of paper or computer screen. Objects described in latitude and longitude are always curved like the surface of the earth; distances measured between latitudes and longitudes are always measured along a curved surface.
</p>
<p>
Projected coordinate systems are formed by "flattening" the earth's surface into a flat domain. Coordinates in a projected system are not in latitude and longitude. They do not measure angles. Instead, they measure distance and position along that flattened surface. Because of this, the actual coordinate values in a projection may not be immediately recognizable. However, the benefit is that objects in a projected coordinate system are flat, so you can draw them on a flat piece of paper or computer screen, and you can perform analysis and calculations the way you are used to used to from your high school geometry class.
</p>
<p>
Here are two sets of coordinates for the Space Needle in Seattle. The first uses a geographic coordinate system, and the values are the familiar longitude and latitude. The second, called "NAD83 / Washington North", is the <em>state plane</em> projected coordinate system for northern Washington state. The coordinates in this projection may not be immediately recognizable, but it points to the same location.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">POINT(-122.34978 47.620578)  -- geographic
POINT(1266457.58 230052.50)  -- projected</pre>
<p>
In the beginning of <a href="http://daniel-azuma.com/articles/georails/part-4" target="_blank" title="Geo-Rails part 4">part 4</a>, we looked at some of the ramifications of using different coordinate systems. They can drastically change the way that objects are shaped or computations are done. Now we'll look at some practical advice regarding choosing coordinate systems to use.
</p>
<h2><a name="TOC-The-PostGIS-geographic-type"></a>The PostGIS geographic type</h2>
<p>
The <a href="http://www.postgis.org/" target="_blank" title="PostGIS geospatial database">PostGIS</a> database provides two different types of spatial columns: geometric and geographic. We saw in <a href="http://daniel-azuma.com/articles/georails/part-2" target="_blank" title="Geo-Rails part 2">part 2</a> that we can specify which type to use in our Rails migrations, through the use of the <code>:geographic</code> modifier:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">class CreateLocations &lt; ActiveRecord::Migration
  def change
    create_table :locations do |t|
      t.string :name
      t.point :latlon, :geographic =&gt; true
      t.timestamps
    end
  end
end</pre>
<p>
Geographic columns use a geographic coordinate system (latitude and longitude on a curved domain). Geometric columns use a projected coordinate system (on a flat domain). But which should you use for your application? To answer this question, we need to unpack what the coordinate system differences mean in the context of PostGIS.
</p>
<p>
Let's start with the obvious. Geographic types use units of latitude and longitude. Since these are familiar concepts, we can put them directly into the database and pull them out for display without having to perform any transformations on the values. This makes the geographic type very convenient for many simple applications.
</p>
<p>
Second, the shape of lines and polygons in geographic columns will follow the curvature of the earth. We saw a dramatic demonstration of this in the beginning of <a href="http://daniel-azuma.com/articles/georails/part-4" target="_blank" title="Geo-Rails part 4">part 4</a>: a "straight line" from San Francisco to Athens passes over Iceland in a geographic coordinate system, even though Iceland is far to the north of either endpoint.
</p>
<p>
Third, as a corollary to the previous point, geographic coordinates for the most part let you ignore seams and singularities. Take a short line segment from <code>POINT(179 0)</code> to <code>POINT(-179 0)</code>. On the globe, in a geographic coordinate system, this is a short line that crosses the International Date Line. Projections, in contrast, have to flatten the earth, and in order to do so, they have to "cut" the globe someplace. This cut becomes the edge of the map. Many projections perform this cut along the Date Line. Hence, if we take our two points on either side of the Date Line, and draw a line segment between then in such a projection, that line would run the other way, crossing most of the world.
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391973817134/articles/georails/part-7/segment_geographic.png" />
<br />
<em>A line segment connecting two points on either side of the Date Line, in a geographic coordinate system</em>
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391973824587/articles/georails/part-7/segment_projected.png" />
<br />
<em>A line segment connecting the same endpoints, in some projections, may cross the entire world.</em>
</p>
<p>
Similarly, the north and south poles also cause problems for many projections. As a result, if you deal with objects that cross the Date Line or live near or especially surrounding the poles, you may have to deal with these (literal) edge cases specially. Generally, the geographic type lets you avoid having to think about these special cases because a globe has no edges.
</p>
<p>
Now the bad news. Computations across a curved surface are more complex than across a flat surface. Distance calculation, intersections, and so forth, will be slower on geographic types than on projections. In fact, some computations will not be available at all. In <a href="http://daniel-azuma.com/articles/georails/part-6" target="_blank" title="Geo-Rails part 6">part 6</a>, we considered an example "counties" table, in which we chose to use a projected coordinate system to store polygons. The reason I did that is that I wanted to cover <code>ST_Relate</code>, a function that PostGIS supports for geometric types but not geographic types.
</p>
<p>
Finally, geographic types are also subject to the model of the earth that you are using. The earth is actually not a perfect sphere, but is slightly flattened along its axis of rotation. In order to perform computations across a large area with a high degree of accuracy, you need to take that flattening into account. Unfortunately, the flattening makes the already complex computations maddeningly complex (and correspondingly slower). Because of this, PostGIS gives you the option of choosing whether to perform computations using the spherical or flattened shape, trading off speed for accuracy. Each function that supports geographic inputs performs the more accurate computations by default, but you can change it to use the faster spherical formulas by passing FALSE as an optional final parameter.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">ST_Distance(pt1, pt2)         -- Uses more accurate computation
ST_Distance(pt1, pt2, FALSE)  -- Uses faster spherical computation</pre>
<h2><a name="TOC-A-case-for-projections"></a>A case for projections</h2>
<p>
So which type should you use? There will be some cases when the decision is clear. If you need to perform computations across large sections of the globe, for example, you will usually want to use the geographic type. However, my experience has been that, for <em>most</em> use cases that you're likely to encounter in a Rails application, you'll get better results by choosing a reasonable projection.
</p>
<p>
Why do I say that?
</p>
<p>
<strong>Spatial data storage should match its usage.</strong> This is, I think, the most important but most overlooked consideration. Often, your application will lend itself to particular projection based on what it <em>does</em> with the data, and it is almost always beneficial to structure your data storage accordingly. I know as engineers we often want to abstract our data representation from our application functionality. But you don't always have that luxury with big data---whether you like it or not, you have to accommodate the resource and performance needs of your database. This goes double with geospatial data, because the queries and analysis can get quite expensive.
</p>
<p>
One very common application is simply the display of your database objects on a Google Map or similar visualization tool. In such an application, most of your queries might be of the form: <em>Give me all the objects that appear within this rectangle on a Google Map.</em> If your data is stored and queried in the same coordinate system as that used by Google Maps, then those rectangular map areas will translate directly into simple rectangular queries in your database. If, however, your database uses a geographic coordinate system or a different projection, your query may map into a distorted or non-rectangular area in your database's coordinate system, resulting in more complex code and/or decreased performance.
</p>
<p>
<strong>Many shapes are best represented in a (particular) projection.</strong> Let's take a look at a shape that should be familiar to most readers, the outline of the United States:
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391973840196/articles/georails/part-7/us_lambert2.png" />
<br />
<em>The United States, in a Lambert Conformal Conic projection. (credit: http://csanet.org/newsletter/winter03/nlw0303.html)</em>
</p>
<p>
Now, much of the northern border with Canada follows a line of latitude, the "49th parallel". A straight line. Except, in the above image, it's not straight; it's curved slightly. This map is in a <em>Lambert Conformal Conic</em> projection, very commonly used for US national and state maps. To represent the northern border of the country in this projection, you would need a curved line (or, in practice, a bunch of short straight lines that together approximate a curved line.) But in some other projections---for example a <em>Mercator</em> projection---lines of latitude are straight, making the shape much easier and more efficient to represent.
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391973849984/articles/georails/part-7/us_mercator1.png" />
<br />
<em>The United States, in a Mercator projection. (credit: http://csanet.org/newsletter/winter03/nlw0303.html)</em>
</p>
<p>
East-west and north-south lines in most political boundaries tend to follow lines of latitude and longitude, respectively, and so are best represented in a projection (such as Mercator) that preserves those lines as straight. Remember, most lines of latitude are <em>not</em> straight in a geographic coordinate system, so a geographic latitude-longitude coordinate system is <em>not</em> particularly well-suited for large political boundaries such as states and countries.
</p>
<p>
<strong>Most data is hyperlocal</strong>. The geographic type's advantages come to the foreground when you're dealing with data spread over the entire globe, or when you need to deal with objects covering large areas or distances covering significant portions of the globe. However, in practice I've found there are very few applications like that. In most cases, you'll be dealing with primarily point data, or if you do have line or polygonal data, the individual objects are small: streets, parcel boundaries, municipal and statistical boundaries, and so forth. Furthermore, in most cases, your data will be limited to a particular part of the world, or at least you'll seldom need to handle data that crosses seams such as poles or the Date Line. So in practice, you seldom actually run into the problems that would be solved by using the geographic type.
</p>
<p>
<strong>Performance does matter</strong>. Many operations gain a substantial performance improvement from using the PostGIS geometry type rather than the geography type. Furthermore, using geometry saves you from having to think about which functions are available and which are not.
</p>
<h2><a name="TOC-A-projection-to-avoid-and-a-projection-to-consider"></a>A projection to avoid and a projection to consider</h2>
<p>
You might be tempted to store latitude and longitude in a geometry type column. That is, to set up your PostGIS column with a geometry type, but use SRID=4326 (which is the EPSG number for WGS 84 latitude and longitude).
</p>
<p>
Don't do this.
</p>
<p>
I did this a few times in my naive youth, and it came back to bite me. What you're really doing here is employing a particular projection called <em>Plate Carree</em>, which simply maps latitude and longitude directly to <em>x</em> and <em>y</em> on the plane. Remember, any time you use geometry rather than geography, you are working with a flat coordinate system, and thus a projection. You might think you're working with latitude and longitude, but you're actually not.
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391973865288/articles/georails/part-7/plate_carree.png" />
<br />
<em>The Plate-Carree projection. (Credit: http://kartoweb.itc.nl/geometrics/Map%20projections/body.htm)</em>
</p>
<p>
Plate Carree is not a particularly useful projection (except that it is trivial to compute). It doesn't preserve distances, angles, directions, areas, or any other cartographically useful properties, and its distortion in polar regions is severe. In almost all cases, you can do much better with a different projection.
</p>
<p>
The projection I tend to recommend for many applications is Mercator. In particular, a minor variation on Mercator that is used by Google and Bing Maps:
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391973871882/articles/georails/part-7/google_world.png" />
<br />
<em>The Google world map, a slight variation on a Mercator projection</em>
</p>
<p>
This coordinate system has EPSG number 3785, and has a number of helpful properties.
</p>
<ul>
<li>It's used by <a href="http://maps.google.com/" target="_blank" title="Google maps">Google maps</a> and <a href="http://www.bing.com/maps/" target="_blank" title="Bing maps">Bing maps</a> (and possibly other mapping systems as well), so if you use those systems for visualization, you have a good match between your data storage and application.</li>
<li>It preserves angles and shapes locally. (In cartographic terms, it is <em>conformal</em>.) This means if you zoom into any part of the map, the shapes and aspect ratio will closely match the real shapes on the globe. This is, I think, the primary reason it is popular with mapping visualizations.</li>
<li>Lines of latitude and longitude are straight, so political boundaries tend to work well.</li>
<li>It's relatively simple to compute.</li>
</ul>
<p>
As with any projection, there will be times when this one is not appropriate. By now, you should have enough understanding to identify many of these cases. However, a few of the common objections you might encounter, are not as important as they sound, and I think I should say a few words about them.
</p>
<p>
You might hear people object to using EPSG 3785 on the grounds that it contains a simplification that introduces cartographic inaccuracies. (Specifically, it treats its underlying geography as a sphere rather than a flattened ellipsoid.) In most cases, this argument makes too much of too little. <em>All</em> projections rely on simplifications that introduce inaccuracies in one form or another. If your application is to bounce a laser across a continent, then by all means dig deep into the corrective factors. But for most web applications, 3785 should be more than sufficient. Indeed, the inaccuracies in most of the data you will gather, including GPS and geocoded data, will far outweigh most of what can be introduced by the projection.
</p>
<p>
You also might hear people object to using the Mercator projection at all, on the grounds that it gives a distorted picture of the nature of the world. Because the projection magnifies areas further from the Equator, it generates map images that appear to privilege richer countries in higher latitudes while downgrading the importance of poorer countries closer to the Equator. In 1989, a well-publicized resolution, signed by a number of prominent geographers, was published in <em>American Cartographer</em>, decrying the use of Mercator and similar rectangular projections for these and other reasons. This point is well-taken, and if you are displaying a full world map, I generally do not recommend Mercator if you can help it. However, here we are talking specifically about database structure, not visualization, so for our purposes I think the point is moot.
</p>
<h2><a name="TOC-Working-with-projected-data-in-Rails"></a>Working with projected data in Rails</h2>
<p>
So let's see some code! I'll demonstrate how to set up your PostGIS database to store data using EPSG 3785, and how to read and write data using ActiveRecord.
</p>
<p>
We'll use our code from <a href="http://daniel-azuma.com/articles/georails/part-2" target="_blank" title="Geo-Rails part 2">part 2</a> as a starting point. But now, in our migration, we no longer set <code>:geographic</code>, but instead use a geometric (flat) coordinate system with SRID = 3785, as follows. (We'll also set up a spatial index, as we saw in <a href="http://daniel-azuma.com/articles/georails/part-6" target="_blank" title="Geo-Rails part 6">part 6</a>.)
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">class CreateLocations &lt; ActiveRecord::Migration
  def change
    create_table :locations do |t|
      t.string :name
      t.point :loc, :srid =&gt; 3785
      t.timestamps
    end
    change_table :locations do |t|
      t.index :loc, :spatial =&gt; true
    end
  end
end</pre>
<p>
We also need to specify a corresponding factory in our ActiveRecord class. Here I'm going to introduce a rather dirty little feature of RGeo: "projected geographic" factories. Now, if you cringed a little at that description, then you're getting the hang of coordinate systems. Geographic coordinate systems are by definition <em>not</em> projected! However, sometimes when you're working with a projection, you'll want a quick way to interact with the data in latitude and longitude---a quick way to transform individual points to geographic coordinates and back again. This is where RGeo's projected geographic factories come in handy.
</p>
<p>
These factories really use a projected coordinate system under the hood. In fact, they reference a full Cartesian factory internally, and you can gain access to that "real" projected factory by calling the <code>projection_factory</code> method. However, they provide you with a convenience interface that lets you look at the data as latitudes and longitudes, as if it were a geographic factory.
</p>
<p>
The "simple_mercator" factory is a useful example. Its "real" internal factory has SRID 3785, indicating the Google Maps style Mercator projection, but the wrapper factory reports latitudes and longitudes. In this way, it mirrors the Google Maps Javascript API. It talks latitudes and longitudes on the outside, but converts them internally to the projection for use with the map.
</p>
<p>
In our ActiveRecord class, we'll set up the factory so it correctly interacts with the database in projected coordinates.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">class Location &lt; ActiveRecord::Base

  # Create a simple mercator factory. This factory itself is
  # geographic (latitude-longitude) but it also contains a
  # companion projection factory that uses EPSG 3785.
  FACTORY = RGeo::Geographic.simple_mercator_factory

  # We're storing data in the database in the projection.
  # So data gotten straight from the "loc" attribute will be in
  # projected coordinates.
  set_rgeo_factory_for_column(:loc, FACTORY.projection_factory)

  # To interact in projected coordinates, just use the "loc"
  # attribute directly.
  def loc_projected
    self.loc
  end
  def loc_projected=(value)
    self.loc = value
  end

  # To use geographic (lat/lon) coordinates, convert them using
  # the wrapper factory.
  def loc_geographic
    FACTORY.unproject(self.loc)
  end
  def loc_geographic=(value)
    self.loc = FACTORY.project(value)
  end

end</pre>
<p>
Now let's do an example query. Suppose our basic query is a simple map search where we want to return all the locations in a given rectangle on our map visualization. Since our data is in the same projection as the original map, a rectangular query in the map translates into a rectangular query in our database. So we'll take the latitudes and longitudes of the rectangle edges as parameters, and convert them to projected coordinates. Once there, we can use a simple PostGIS box intersection to run the query itself. It's a simple query that can be accelerated using the spatial index.
</p>
<p>
We'll add a scope to our class as follows:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">class Location &lt; ActiveRecord::Base

  # ...

  # w,s,e,n are in latitude-longitude
  def self.in_rect(w, s, e, n)
    # Create lat-lon points, and then get the projections.
    sw = FACTORY.point(w, s).projection
    ne = FACTORY.point(e, n).projection
    # Now we can create a scope for this query.
    where("loc &amp;&amp; '#{sw.x},#{sw.y},#{ne.x},#{ne.y}'::box")
  end

end</pre>
<p>
Now rectangle searches are simple:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">locations = Location.in_rect(-122, 47, -121, 48).all</pre>
<h2><a name="TOC-Where-to-go-from-here"></a>Where to go from here</h2>
<p>
In this article, we saw some of the pros and cons of using different coordinate systems for your database. The right coordinate system will depend on your application, but I've found that for many applications, using a projection---often the specific projection EPSG 3785---produces good results.
</p>
<p>
It may be useful at this point to gain a general feel for the different types of projections, how they work, and what their pros and cons are. A very good online resource for this is provided <a href="http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html" target="_blank" title="USGS introduction to map projections">here</a> by the USGS.
</p>
<p>
The <code>RGeo::Geographic.simple_mercator_factory</code> is useful for storing data in EPSG 3785. However, if you want to use a different projection under the hood, you can use a more powerful method, <code>RGeo::Geographic.projected_factory</code>, which lets you specify arbitrary projections using Proj4. Read about it in the <a href="http://dazuma.github.io/rgeo/rdoc" target="_blank" title="RGeo documentation">RGeo documentation</a>.
</p>
<p>
Next time, I will get to the worked example I promised last week. Stay tuned, and let's bring Rails down to earth!
</p>
<p>
<em>This is part 7 of my continuing series of articles on geospatial programming in Ruby and Rails. For a list of the other installments, please visit <a href="http://daniel-azuma.com/articles/georails" target="_blank" title="Geo-Rails series">http://daniel-azuma.com/articles/georails</a>.</em>
</p></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
</div>
</div> 
</td> 
<td id="sites-chrome-sidebar-right" class="sites-layout-sidebar-right" style="width:210px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_20715116360224783" class="sites-embed"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1392135198793/updates/mug_small.jpg" />
</p>
<p style="text-align:center">
Daniel Azuma is a software engineer in the Seattle area.</p></div></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_2bd" class="sites-embed"><div class="sites-embed-content sites-sidebar-nav"><ul jotId="navList" class="has-expander"><li class="topLevel nav-first parent " wuid="gx:77f758e02286adc5"><div dir="ltr" style="padding-left: 0px;"><div class="expander"></div><a href="/articles" jotId="wuid:gx:77f758e02286adc5" class="sites-navigation-link topLevel">Articles</a></div><ul class="has-expander"><li class="parent " wuid="gx:63933589a24d6669"><div dir="ltr" style="padding-left: 19px;"><div class="expander"></div><a href="/articles/georails" jotId="wuid:gx:63933589a24d6669" class="sites-navigation-link">GeoRails</a></div><ul class="has-expander"><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-1" jotId="wuid:gx:21263add3704d85a" class="sites-navigation-link">Part 1</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-2" jotId="wuid:gx:583b2472f184df59" class="sites-navigation-link">Part 2</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-3" jotId="wuid:gx:2215c067d09b656d" class="sites-navigation-link">Part 3</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-4" jotId="wuid:gx:736c4f9a4a910dc3" class="sites-navigation-link">Part 4</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-5" jotId="wuid:gx:71e83b60478e8b52" class="sites-navigation-link">Part 5</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-6" jotId="wuid:gx:7c72159f0815753d" class="sites-navigation-link">Part 6</a></div></li><li class=""><div class="current-bg" jotId="wuid:gx:538f6eeef4c76cfc" dir="ltr" style="padding-left: 57px;">Part 7</div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-8" jotId="wuid:gx:7417ef859fc351a7" class="sites-navigation-link">Part 8</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-9" jotId="wuid:gx:4fae9206819b4a64" class="sites-navigation-link">Part 9</a></div></li></ul></li><li class="parent closed " wuid="gx:77f18de4f94a3c47"><div dir="ltr" style="padding-left: 19px;"><div class="expander"></div><a href="/articles/talks" jotId="wuid:gx:77f18de4f94a3c47" class="sites-navigation-link">Talks</a></div><ul class="has-expander"><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/talks/railsconf-2012" jotId="wuid:gx:6a4476d67668a24a" class="sites-navigation-link">Geospatial Analysis With Rails (RailsConf 2012)</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/talks/railsconf-2013" jotId="wuid:gx:53413222cba48516" class="sites-navigation-link">Humanity on Rails (RailsConf 2013)</a></div></li></ul></li></ul></li><li class="topLevel "><div dir="ltr" style="padding-left: 19px;"><a href="http://dazuma.github.io/" class="sites-navigation-link topLevel" target="_blank">Github Projects</a></div></li></ul></div></div>
</td>
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/daniel-azuma.com/blog/articles/georails/part-7">Sign in</a>|<a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a>|<a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a>|<span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>

<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/d3f591/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
    
        sites.core.Analytics.createTracker();
        sites.core.Analytics.trackPageview();
      
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("2bd", "Articles", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_2bd');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://gsite.daniel-azuma.com/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
 //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          if (webspace.features.siteNotice) {
            JOT_setupNoticeManager();
          }
        </script>
<script type="text/javascript">
              JOT_postEvent('renderPlus', null, 'sites-chrome-main');
            </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
