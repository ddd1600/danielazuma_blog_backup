<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var b=window,e="chrome",g="tick",h="wtsrt_",l="tbsd_",m="tbnd_",n="start",p="_wtsrt",q="_tbnd",r="CSI/";(function(){function k(a){this.t={};this.tick=function(a,d,c){this.t[a]=[void 0!=c?c:(new Date).getTime(),d];if(void 0==c)try{b.console.timeStamp(r+a)}catch(f){}};this[g](n,null,a)}var a;b.performance&&(a=b.performance.timing);var s=a?new k(a.responseStart):new k;b.jstiming={Timer:k,load:s};if(a){var d=a.navigationStart,f=a.responseStart;0<d&&f>=d&&(b.jstiming.srt=f-d)}if(a){var c=b.jstiming.load;0<d&&f>=d&&(c[g](p,void 0,d),c[g](h,p,f),c[g](l,h))}try{a=null,b[e]&&b[e].csi&&(a=Math.floor(b[e].csi().pageT),
c&&0<d&&(c[g](q,void 0,b[e].csi().startE),c[g](m,q,d))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,c&&0<d&&(c[g](q,void 0,b.external.startE),c[g](m,q,d))),a&&(b.jstiming.pt=a)}catch(t){}})(); })()
</script>
<link rel="shortcut icon" type="image/x-icon" href="//www.google.com/images/icons/product/sites-16.ico" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/d3f591/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d=window,e="length",h="",k="__duration__",l="function";function m(c){return document.getElementById(c)}d.byId=m;function n(c){return c.replace(/^\s+|\s+$/g,h)}d.trim=n;var p=[],q=0;d.JOT_addListener=function(c,a,b){var f=new String(q++);c={eventName:c,handler:a,compId:b,key:f};p.push(c);return f};d.JOT_removeListenerByKey=function(c){for(var a=0;a<p[e];a++)if(p[a].key==c){p.splice(a,1);break}};d.JOT_removeAllListenersForName=function(c){for(var a=0;a<p[e];a++)p[a].eventName==c&&p.splice(a,1)};
d.JOT_postEvent=function(c,a,b){var f={eventName:c,eventSrc:a||{},payload:b||{}};if(d.JOT_fullyLoaded)for(a=p[e],b=0;b<a&&b<p[e];b++){var g=p[b];g&&g.eventName==c&&(f.listenerCompId=g.compId||h,(g=typeof g.handler==l?g.handler:d[g.handler])&&g(f))}else d.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};d.JOT_delayedEvents=[];d.JOT_fullyLoaded=!1;
d.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var f=0;60<=b&&(b/=60,f=2);2<=b&&f++;return a?d.JOT_siteRelTimeStrs[f].replace(k,Math.floor(b)):d.JOT_userRelTimeStrs[f].replace(k,Math.floor(b))}; })()
</script>
<script>


var webspace = {"scottyUrl":"/_/upload","isConsumer":false,"canPublishScriptToAnyone":true,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"sharingUrlPrefix":"/_/sharing","csiReportUri":"http://csi.gstatic.com/csi","sharingPolicy":"OPENED","analyticsAccountId":"","baseUri":"","name":"blog","domain":"daniel-azuma.com","features":{"horizontalNavLayout":true,"asyncPermanentDelete":false,"ritzSupport":true,"folderEmbed":true,"moreBackgroundTweaks":true,"flipFolderUrls":true,"animateNavigation":true,"driveInFileCabinet":true,"skiThemeIsDefault":true,"pdfEmbedSupport":false,"animateToc":true,"siteChromeSidebarWidgetsEditDialog":true,"canonicalLinkTagInHead":true,"analyticsTrackingForCorp":false,"driveImageEmbed":true,"siteChromeSystemFooterDialog":true,"plusOneButtonOptions":true,"plusOneButton":true,"adSenseDeprecate":true,"photoAlbumsInOnePick":true,"docosHideNotificationSettings":true,"helpBox":true,"siteNotice":true,"skiTheme":true,"siteChromeDialogsToolbar":true,"ritzChartSupport":true,"plusBadge":false,"siteChromeHorizontalNavigationDialog":true,"youTubeEmbedSize":true,"adSenseDeprecateMsg":true,"htmlEmbed":true,"plusPost":true,"photoAlbumsGPlusUrlSupport":true,"siteChromeHeaderDialog":true,"fileCabinetOptions":true,"sitesLoveFixes":true},"adsensePublisherId":null,"gvizVersion":1,"siteTitle":"Daniel Azuma","pageSharingId":"jotspot_page","plusPageId":"","onepickBaseUrl":"https://docs.google.com","siteNoticeRevision":null,"termsUrl":"http://sites.google.com/site/sites/system/app/pages/meta/terms?apps\u003d1","enableAnalytics":false,"isPublic":true,"siteNoticeMessage":null,"plusPageUrl":"","homePath":"/","sharingId":"jotspot","isAdsenseEnabled":true,"adsensePromoClickedOrSiteIneligible":true,"isStartPageEnabled":true,"domainAnalyticsAccountId":""};



webspace.gadgets = {"baseUri":"/system/app/pages/gadgets"};


webspace.user = {"uid":"","renderMobile":false,"primaryEmail":"guest","sessionIndex":"","namespaceUser":false,"displayNameOrEmail":"guest","namespace":"","hasAdminAccess":false,"guest_":true,"keyboardShortcuts":true,"domain":"","hasWriteAccess":false,"dasherUser":false,"userName":"guest"};

webspace.page = {"canDeleteWebspace":null,"locale":"en","state":"","wuid":"wuid:gx:71e83b60478e8b52","pageInheritsPermissions":null,"timeZone":"America/Los_Angeles","properties":{},"type":"text","canChangePath":true,"parentWuid":"wuid:gx:63933589a24d6669","revision":6,"title":"Part 5","isRtlLocale":false,"bidiEnabled":false,"siteLocale":"en","name":"part-5","path":"/articles/georails/part-5","isSiteRtlLocale":false,"parentPath":"/articles/georails"};
webspace.page.breadcrumbs = [{"title":"Articles","dir":"ltr","path":"/articles","deleted":false},{"title":"GeoRails","dir":"ltr","path":"/articles/georails","deleted":false},{"title":"Part 5","dir":"ltr","path":"/articles/georails/part-5","deleted":false}];


webspace.editorResources = {
  text: [
    'http://www.gstatic.com/sites/p/d3f591/system/js/codemirror.js',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/codemirror_css.css',
    'http://www.gstatic.com/sites/p/d3f591/system/js/trog_edit__en.js',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/trogedit.css',
    '/_/rsrc/1399440112000/system/app/css/editor.css',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/codeeditor.css',
    '/_/rsrc/1399440112000/system/app/css/camelot/editor-jfk.css'
  ],
  sitelayout: [
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/sitelayouteditor.css'
  ]
};

var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/d3f591/system/app/images/cleardot.gif';


var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];


webspace.siteTemplateId = false;


webspace.page.currentTemplate = {"title":"Web Page","path":"/system/app/pagetemplates/text"};



var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Part 5 - Daniel Azuma" />
<meta itemprop="name" content="Part 5 - Daniel Azuma" />
<meta property="og:title" content="Part 5 - Daniel Azuma" />
<style type="text/css">
      
      @font-face {
  font-family: 'Limelight';
  font-style: normal;
  font-weight: 400;
  src: local('Limelight'), url('//themes.googleusercontent.com/static/fonts/limelight/v5/kD_2YDkzv1rorNqQ2oFK5rO3LdcAZYWl9Si6vvxL-qU.woff') format('woff');
}

    
    </style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/d3f591/system/app/themes/simple/standard-css-simple-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1399440112000/system/app/css/overlay.css?cb=simple20a960px158210goog-ws-nav-rightnone30topstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1399440112000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Part 5 - Daniel Azuma</title>
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<script src="//www.gstatic.com/caja/5678/caja.js"> </script>
<script src="http://www.gstatic.com/sites/p/d3f591/system/js/jot_caja.js"> </script>
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="sites-chrome-header-valign-top" style="height: 158px"><div class="sites-header-cell-buffer-wrapper"><h2></h2></div></td><td class="sites-layout-searchbox sites-chrome-header-valign-top"><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container">
<div class="sites-header-nav"><ul class="sites-header-nav-container-tabs"><li class="unselected"><a class="sites-navigation-link unselected" href="/updates">Home</a></li><li class="unselected"><a class="sites-navigation-link unselected" href="/contact">Contact</a></li></ul><div style="clear: both;"></div></div>
</td>
</tr>
</table> 
</div> 
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-canvas-wrapper">
<div id="sites-canvas">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="display: none;">
<A dir="ltr" href="/articles">Articles</A>‎ &gt; ‎<A dir="ltr" href="/articles/georails">GeoRails</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="display: none;" align="left">
<span id="sites-page-title" dir="ltr">Part 5</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><h1><a name="TOC-Geo-Rails-Part-5:-Spatial-Data-Formats"></a>Geo-Rails Part 5: Spatial Data Formats</h1>
<p><em>Originally published Dec 19, 2011</em></p>
<p>
The location revolution is a revolution of data. Ubiquitous data, from mobile GPS and user input as well as from census and other datasets, is what makes location-aware applications possible. And so the first task of many geospatial projects is to determine how to find and utilize (and, in some cases, produce) external data.
</p>
<p>
In this article, we will survey some of the important spatial data formats, including serialization, file formats, and api-oriented formats. Specifically, we will look at:
</p>
<ul>
<li>Basic serialization using WKT and WKB</li>
<li>Variants on WKT and WKB</li>
<li>Reading public datasets from shapefiles</li>
<li>Web service oriented formats such as GeoJSON</li>
<li>XML-based formats commonly used in web services</li>
</ul>
<p>
We will also go over a few quick examples using Ruby and <a href="http://dazuma.github.io/rgeo" target="_blank" title="RGeo">RGeo</a>. This will be a fairly high-level overview and we won't go into a lot of detail. We'll take deeper looks at some of these formats in future articles.
</p>
<p>
This is part 5 of my continuing series of articles on geospatial programming in Ruby and Rails. For a list of the other installments, please visit <a href="http://daniel-azuma.com/articles/georails" target="_blank" title="Geo-Rails series">http://daniel-azuma.com/articles/georails</a>.
</p>
<h2><a name="TOC-The-standard-OGC-serialization-formats"></a>The standard OGC serialization formats</h2>
<p>
If, after reading <a href="http://daniel-azuma.com/articles/georails/part-3" target="_blank" title="Geo-Rails part 3">part 3</a>, you looked through the Simple Feature interfaces (or the corresponding RGeo interfaces), you may have noticed two serialization methods provided for geometries: <code>as_text</code> and <code>as_binary</code>. These methods respectively output the "Well-Known Text" and "Well-Known Binary" representations of the geometry. These two standard serialization formats are defined by the <a href="http://www.opengeospatial.org/standards/sfa" target="_blank" title="Simple Features Spec">OGC Simple Feature Access specification</a>, and commonly supported by most GIS systems.
</p>
<p>
Well-Known Text (often abbreviated WKT) is a human-readable and parseable text-based format for all geometry objects. You can read the exact format specification in the Simple Features Spec, but a few examples are probably sufficient to get the general hang of it.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">Point(-122.1 47.2)
LineString(2 4, 5 4, 5 8, 2 4)
Polygon((0 0, 5 0, 5 5, 0 5, 0 0), (2 2, 2 3, 3 3, 3 2, 2 2))
MultiPoint((-122.1 47.2), (-93.5 39.4))
GeometryCollection(Point(3 5), LineString(-2 0, -3 -4))
MultiLineString EMPTY</pre>
<p>
Don't confuse the simple features WKT format with the coordinate system WKT format we covered in <a href="http://daniel-azuma.com/articles/georails/part-4" target="_blank" title="Geo-Rails part 4">part 4</a>. Unfortunately, both are commonly known as Well-Known Text (WKT), but they are distinct formats: one represents geometric objects whereas the other represents coordinate systems.
</p>
<p>
Well-Known Binary (often abbreviated WKB) is a binary format that uses numeric codes and IEEE floating-point representations. It is not human-readable but is much more compact than WKT.
</p>
<p>
Using RGeo, you can obtain the WKT and WKB representations of a geometric object by calling <code>as_text</code> and <code>as_binary</code>, respectively. Factory objects will provide methods to parse WKT and WKB format and recover the geometric object.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">point = factory.point(1, 2)
wkt = point.as_text   # =&gt; "Point(1 2)"
point2 = factory.parse_wkt(wkt)
point == point2       # =&gt; true</pre>
<h2><a name="TOC-Variants-on-WKT-and-WKB"></a>Variants on WKT and WKB</h2>
<p>
As simple and well-supported as they are, WKT an WKB have several important weaknesses that have caused headaches for spatial databases and applications. In <a href="http://daniel-azuma.com/articles/georails/part-4" target="_blank" title="Geo-Rails part 4">part 4</a>, we saw that to properly interpret a geometric object, you need to know the coordinate system, which is usually specified by a spatial reference ID (SRID). Unfortunately, neither WKT nor WKB include a way to represent SRID. They expect SRID to be specified or implied elsewhere, which is sometimes but not always true.
</p>
<p>
Furthermore, some applications use additional coordinates in their geometric data. Applications that store altitude or other third-dimensional data may include a "Z" coordinate in their geometries. Other applications may include a measurement (such as temperature or population) stored in an "M" coordinate. Version 1.1 of the Simple Features Spec (and the corresponding WKT and WKB specifications) do not directly support these extra coordinates, (although version 1.2 does address this, as we will see.)
</p>
<p>
Finally, neither WKT nor WKB by themselves provide a way to associate metadata, such as object names or other properties, with geometric objects. This limits their usefulness as a complete format for data transmission.
</p>
<p>
Because of these limitations, several variants have appeared that you should be aware of. The <a href="http://www.postgis.org/" target="_blank" title="PostGIS">PostGIS</a> database supports an extension to WKT called "EWKT", which supports SRID as well as "Z" and "M" coordinates. The SRID, if present, appears at the front of the EWKT string:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">SRID=4326;Point(-122.34978 47.62058)</pre>
<p>
EWKT supporting "Z" and "M" coordinates to be appended to each pair of coordinates as third and fourth coordinate values. When both "Z" and "M" are present (i.e. four coordinate values per point), the third coordinate is used for "Z" while the fourth is used for "M". If only one is used (i.e. three coordinate values per point), you must specify whether it is "Z" or "M". Here are some examples:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">Point(-122.34978 47.62057 20.0 -3)  # X,Y,Z,M in EWKT
PointM(-122.34978 47.62057 -3)      # X,Y,M
PointZ(-122.34978 47.62057 20.0)    # X,Y,Z</pre>
<p>
PostGIS also defines a corresponding "EWKB" format with appropriate extensions to the binary format to support SRID as well as Z and M. EWKB is (or at least appears to be) the native internal format used by PostGIS to represent geometric data.
</p>
<p>
More recent versions of the OGC Simple Features Spec (version 1.2 and later) also provide support for Z and M. However, beware that the OGC format is not the same as the PostGIS EWKT and EWKB. The WKT update expects a space between the geometry type and the Z/M specifier, and it also requires the modifier in the "four-dimensional" ZM case:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">Point ZM(-122.34978 47.62057 20.0 -3)  # X,Y,Z,M in WKT 1.2
Point M(-122.34978 47.62057 -3)        # X,Y,M
Point Z(-122.34978 47.62057 20.0)      # X,Y,Z</pre>
<p>
Furthermore, the updated WKT format still does not support a SRID. The updated WKB similarly supports Z and M (but not SRID), but uses different binary codes than those used by EWKB. Hence, these two extensions are not fully compatible with each other.
</p>
<p>
Because of this fragmentation, neither of these extensions are, in practice, used frequently for long-term serialization. However, you will likely need to work with EWKT at some point if you use PostGIS, so it is important to be familiar with it.
</p>
<p>
RGeo provides support for parsing and generating both variants in the <code>RGeo::WKRep</code> module. See the <a href="http://dazuma.github.io/rgeo/rdoc" target="_blank" title="RGeo documentation">rdocs</a> for more details. Here's a really quick code example as a starting point:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">parser = RGeo::WKRep::WKTParser.new(nil, :support_ewkt =&gt; true)
point = parser.parse('SRID=4326;Point(-122.1 47.3)')
point.srid   # =&gt; 4326</pre>
<h2><a name="TOC-Shapefiles-and-public-datasets"></a>Shapefiles and public datasets</h2>
<p>
Location is driven by data, and a lot of the data you will need to work with will likely come in the form of <em>shapefiles</em>. The shapefile is a flat file format for geospatial data originally developed by <a href="http://www.esri.com/" target="_blank" title="ESRI">ESRI</a> for storing sets of geographic features. It supports certain vector shapes-- points, lines, and polygons-- along with associated attributes. Although shapefile began as a proprietary format, the format specification is readily available, and it is now a <em>de facto</em> standard for large datasets, including those provided by government agencies such as the <a href="http://www.census.gov/" target="_blank" title="Census">US Census Bureau</a>.
</p>
<p>
A shapefile actually consists of three (and sometimes more) related files, each with the same base filename but different extensions. The main file has the extension "<code>.shp</code>" and contains the geometric data itself in a binary format. An auxiliary "<code>.shx</code>" file provides a simple flat index allowing random access into the shapefile. A second auxiliary "<code>.dbf</code>" file provides the attribute data in <a href="http://dbase.com/" target="_blank" title="dBASE">dBASE</a> format. All shapefiles should have those three core files, although some shapefiles may include additional files containing coordinate system, spatial index, or other related information.
</p>
<p>
Most Rails applications will not read a shapefile directly, but will instead transfer the data to a spatial database such as PostGIS for rapid query and data retrieval. In Ruby, you can use the <a href="http://dazuma.github.io/rgeo-shapefile" target="_blank" title="rgeo-shapefile gem">rgeo-shapefile</a> gem to help with this task. This gem does the heavy lifting involved with parsing and analyzing a shapefile, and exposes the data to you as RGeo geometric objects. You should also install the <a href="https://rubygems.org/gems/dbf" target="_blank" title="DBF gem">dbf</a> gem, which lets you read the dBASE attributes in the shapefile.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">% gem install rgeo-shapefile
% gem install dbf</pre>
<p>
Once you have the gems installed, and you've downloaded and unpacked a shapefile, use the <code>RGeo::Shapefile::Reader</code> class to open and read the file. The following example reads objects sequentially:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">factory = RGeo::Geographic.spherical_factory(:srid =&gt; 4326)
RGeo::Shapefile::Reader.open('myfile.shp', :factory =&gt; factory) do |file|
  file.each do |record|
    geom = record.geometry
    # geom is now an RGeo geometry object.
    name = record['Name']
    # You can read any other attribute similarly.
    # Now, you can do whatever you want with the data,
    # such as inserting rows into your database...
  end
end</pre>
<p>
Notice that we provide a factory for the objects being read. Shapefiles generally do not provide an SRID, so we must supply that. The above example assumes the shapefile contains latitude-longitude coordinates in WSG84.
</p>
<p>
The <code>RGeo::Shapefile::Reader</code> class also lets you do random access reads, and get other information about the shapefile's contents. See the <a href="http://dazuma.github.io/rgeo-shapefile/rdoc" target="_blank" title="rgeo-shapefile rdocs">rdocs</a> for more details. The gem does not currently support writing shapefiles, but that feature is on the roadmap.
</p>
<p>
For more information on the shapefile format itself, you can find the original ESRI specification at <a href="http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf" target="_blank" title="Shapefile specification">http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf</a>. Another common (C-based) implementation of shapefile is Shapelib, which you can find at <a href="http://shapelib.maptools.org/" target="_blank" title="ShapeLib">http://shapelib.maptools.org/</a>.
</p>
<h2><a name="TOC-Web-services-and-GeoJSON"></a>Web services and GeoJSON</h2>
<p>
Another way to obtain location data is to call a web service such as <a href="http://code.google.com/apis/maps/documentation/places/" target="_blank" title="Google Places API">Google Places</a>, <a href="https://simplegeo.com/" target="_blank" title="SimpleGeo">SimpleGeo</a>, or <a href="http://www.factual.com/" target="_blank" title="Factual">Factual</a>. These services do the heavy lifting of curating, deduping, and managing location data, and generally provide an http REST api letting you query for location information of interest.
</p>
<p>
There are a number of different types of web services, including geocoders, point of interest search, location properties, and others. I'll write up a survey of useful location-oriented web services in a later article. For this current article, however, we are interested in data formats that would typically be returned from a point of interest search. When you make a query, what sort of data can you expect to get?
</p>
<p>
In many cases, the web service will define its own schema for the returned data. You must then parse the returned document yourself to extract the information you want. There are well-known gems available for this task, such as <a href="http://flori.github.com/json/" target="_blank" title="JSON gem">json</a> for parsing <a href="http://www.json.org/" target="_blank" title="JSON format">JSON</a>, and <a href="http://nokogiri.org/" target="_blank" title="Nokogiri XML parser">nokogiri</a> for parsing XML. There are also, however, a few semi-standard schemas commonly used by a number of web services. Here we will take a quick tour of some of these formats and how you can go about using them.
</p>
<p>
<strong>GeoJSON</strong> is an important emerging standard commonly used by SimpleGeo and similar modern APIs. It provides a standard JSON representation for each geometric type, as well as support for bounding boxes, coordinate systems, and a set of properties. Following is an example of GeoJSON, lifted out of the specification:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">{ "type": "FeatureCollection",
  "features": [
    { "type": "Feature",
      "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
      "properties": {"prop0": "value0"}
      },
    { "type": "Feature",
      "geometry": {
        "type": "LineString",
        "coordinates": [
          [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]
          ]
        },
      "properties": {
        "prop0": "value0",
        "prop1": 0.0
        }
      },
    { "type": "Feature",
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],
            [100.0, 1.0], [100.0, 0.0] ]
          ]
      },
      "properties": {
        "prop0": "value0",
        "prop1": {"this": "that"}
        }
      }
    ]
  }</pre>
<p>
The core object type in GeoJSON is the <em>Feature</em>, which consists of a geometry and a set of properties. The geometry can be any of the OGC types, and its internal representation is closely modeled on WKT. Properties are simply named key-value pairs whose values can be any JSON object.
</p>
<p>
GeoJSON is simple and highly versatile, and is often an ideal format both for consuming and producing geospatial data. From Ruby, you can use the <a href="http://dazuma.github.io/rgeo-geojson" target="_blank" title="rgeo-geojson gem">rgeo-geojson</a> gem to read and write GeoJSON. Here are some quick examples to get you started:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">require 'rgeo/geo_json'

str1 = '{"type":"Point","coordinates":[1,2]}'
geom = RGeo::GeoJSON.decode(str1, :json_parser =&gt; :json)
geom.as_text              # =&gt; "POINT(1.0 2.0)"

str2 = '{"type":"Feature","geometry":{"type":"Point","coordinates":' +
  '[2.5,4.0]},"properties":{"color":"red"}}'
feature = RGeo::GeoJSON.decode(str2, :json_parser =&gt; :json)
feature['color']          # =&gt; 'red'
feature.geometry.as_text  # =&gt; "POINT(2.5 4.0)"

hash = RGeo::GeoJSON.encode(feature)
hash.to_json == str2      # =&gt; true</pre>
<p>
For more information on GeoJSON, see <a href="http://geojson.org/" target="_blank" title="GeoJSON">http://geojson.org/</a>. The actual spec hosted on the website is quite short and very readable. You can find more information on the rgeo-geojson gem from its <a href="http://dazuma.github.io/rgeo-geojson/rdoc" target="_blank" title="GeoJSON rdoc">rdocs</a>.
</p>
<h2><a name="TOC-XML-based-formats"></a>XML-based formats</h2>
<p>
Although JSON is often a format of choice for many modern web services because of its simplicity and its close affinity with Javascript and similar high-level languages, XML is still the established standard in many fields and applications. GIS services, in particular, have a long tradition of XML-based representation, and there are a number of XML-based geospatial formats you may encounter when writing location-aware applications. Among them:
</p>
<p>
<strong>GeoRSS</strong> is a family of RSS extensions for embedding geospatial data into RSS or Atom feeds, often used to spatially tag feed entries. It comes in two flavors, <em>Simple GeoRSS</em> and <em>GML GeoRSS</em>. Simple GeoRSS is designed for simplicity, and supports a limited set of features. Notably, not all the OGC geometric types can be represented, and coordinate system is limited to WGS84 latitude/longitude. GML GeoRSS is a more full-featured but much more complex format, essentially a profile of <em>GML</em>, which we will cover below. Most actual implementations of GeoRSS are of the Simple flavor.
</p>
<p>
Below are a couple of examples of a basic GeoRSS element from an RSS feed, first in the Simple flavor and then in the GML flavor.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">&lt;georss:point&gt;47.604828 -122.330779&lt;/georss:point&gt;</pre>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">&lt;GeoRSS:where&gt;
  &lt;gml:Point&gt;
    &lt;gml:pos&gt;47.604828 -122.330779&lt;/gml:pos&gt;
  &lt;/gml:Point&gt;
&lt;GeoRSS:where&gt;</pre>
<p>
As of this writing, the georss.org website appears to be unmaintained and possibly hacked. The best starting point I can recommend for GeoRSS is an OGC whitepaper at <a href="http://portal.opengeospatial.org/files/?artifact_id=15755" target="_blank" title="GeoRSS whitepaper from OGC">http://portal.opengeospatial.org/files/?artifact_id=15755</a>.
</p>
<p>
I'm not currently aware of an RGeo-based Ruby implementation of GeoRSS. The older <a href="http://georuby.rubyforge.org/" target="_blank" title="GeoRuby gem">GeoRuby</a> gem, however, does have basic support for GeoRSS.
</p>
<p>
<strong>Geography Markup Language</strong> (or <strong>GML</strong>) is an XML-based object model intended to describe geographic information. Its specification is maintained by the Open Geospatial Consortium. GML by itself is a highly general and flexible model that can represent not only geometric objects and coordinate systems such as we have looked at so far in this article series, but also observations, topological information, temporal information, and various other related entities.
</p>
<p>
You generally don't work with GML directly, but instead use an application XML schema that references GML internally. Furthermore, most application schemas don't utilize the entire GML specification, but a relevant subset, known as a <em>GML profile</em>. For example, GML GeoRSS is an application schema referencing a GML profile relevant to geotagging feed entries.
</p>
<p>
Another common GML-based XML schema is <em>CityGML</em> (<a href="http://www.citygml.org/" target="_blank" title="CityGML website">http://www.citygml.org/</a>), which is designed to model urban objects. CityGML is commonly used, for example, to model 3D visualizations of cities.
</p>
<p>
For more information on GML as a whole, you can review the OGC spec at <a href="http://www.opengeospatial.org/standards/gml" target="_blank" title="OGC GML spec">http://www.opengeospatial.org/standards/gml</a>.
</p>
<p>
I'm not currently aware of any specific Ruby support for GML or its various dialects.
</p>
<p>
<strong>KML</strong> (or <strong>Keyhole Markup Language</strong>) is an XML schema that originated at Google for describing features in <a href="http://earth.google.com/" target="_blank" title="Google Earth">Google Earth</a>, but was later standardized by the OGC. Although it does have some overlap with GML, KML is often seen as complementary because of its particular emphasis on visualization. Its intended use is to describe how to display features within a Google Earth style application. You can, for example, open a KML file with Google Earth to display its contents.
</p>
<p>
For more information on KML, see the Google documentation at <a href="http://code.google.com/apis/kml/documentation/" target="_blank" title="KML documentation from Google">http://code.google.com/apis/kml/documentation/</a> or the OGC specification at <a href="http://www.opengeospatial.org/standards/kml" target="_blank" title="OGC KML spec">http://www.opengeospatial.org/standards/kml</a>.
</p>
<p>
I'm not currently aware of any specific Ruby support for KML.
</p>
<h2><a name="TOC-Where-to-go-from-here"></a>Where to go from here</h2>
<p>
This article has covered just a few of the most common and/or promising major spatial data formats. There are a number of others currently in use, including many locale or application-specific forms. But as you can see, Ruby support for even the major formats is currently rather thin. We still have much work to do on our tools.
</p>
<p>
As the principal author of RGeo, I'm looking for help in this area. I released the rgeo-geojson and rgeo-shapefile gems based on work I've done to integrate my own applications with those formats. However, I haven't yet had the need to actually use one of the XML formats, and as a result I haven't written any tools to help with them. There is currently quite a bit of room to contribute to the community in this area.
</p>
<p>
Next week I'm going to take a break for the holidays, but I expect to release the next planned article on scaling spatial applications with the new year. Stay tuned, and let's bring Rails down to earth!
</p>
<p>
<em>This is part 5 of my continuing series of articles on geospatial programming in Ruby and Rails. For a list of the other installments, please visit <a href="http://daniel-azuma.com/articles/georails" target="_blank" title="Geo-Rails article series">http://daniel-azuma.com/articles/georails</a>.</em>
</p></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
</div>
</div> 
</td> 
<td id="sites-chrome-sidebar-right" class="sites-layout-sidebar-right" style="width:210px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_20715116360224783" class="sites-embed"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1392135198793/updates/mug_small.jpg" />
</p>
<p style="text-align:center">
Daniel Azuma is a software engineer in the Seattle area.</p></div></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_2bd" class="sites-embed"><div class="sites-embed-content sites-sidebar-nav"><ul jotId="navList" class="has-expander"><li class="topLevel nav-first parent " wuid="gx:77f758e02286adc5"><div dir="ltr" style="padding-left: 0px;"><div class="expander"></div><a href="/articles" jotId="wuid:gx:77f758e02286adc5" class="sites-navigation-link topLevel">Articles</a></div><ul class="has-expander"><li class="parent " wuid="gx:63933589a24d6669"><div dir="ltr" style="padding-left: 19px;"><div class="expander"></div><a href="/articles/georails" jotId="wuid:gx:63933589a24d6669" class="sites-navigation-link">GeoRails</a></div><ul class="has-expander"><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-1" jotId="wuid:gx:21263add3704d85a" class="sites-navigation-link">Part 1</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-2" jotId="wuid:gx:583b2472f184df59" class="sites-navigation-link">Part 2</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-3" jotId="wuid:gx:2215c067d09b656d" class="sites-navigation-link">Part 3</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-4" jotId="wuid:gx:736c4f9a4a910dc3" class="sites-navigation-link">Part 4</a></div></li><li class=""><div class="current-bg" jotId="wuid:gx:71e83b60478e8b52" dir="ltr" style="padding-left: 57px;">Part 5</div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-6" jotId="wuid:gx:7c72159f0815753d" class="sites-navigation-link">Part 6</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-7" jotId="wuid:gx:538f6eeef4c76cfc" class="sites-navigation-link">Part 7</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-8" jotId="wuid:gx:7417ef859fc351a7" class="sites-navigation-link">Part 8</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-9" jotId="wuid:gx:4fae9206819b4a64" class="sites-navigation-link">Part 9</a></div></li></ul></li><li class="parent closed " wuid="gx:77f18de4f94a3c47"><div dir="ltr" style="padding-left: 19px;"><div class="expander"></div><a href="/articles/talks" jotId="wuid:gx:77f18de4f94a3c47" class="sites-navigation-link">Talks</a></div><ul class="has-expander"><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/talks/railsconf-2012" jotId="wuid:gx:6a4476d67668a24a" class="sites-navigation-link">Geospatial Analysis With Rails (RailsConf 2012)</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/talks/railsconf-2013" jotId="wuid:gx:53413222cba48516" class="sites-navigation-link">Humanity on Rails (RailsConf 2013)</a></div></li></ul></li></ul></li><li class="topLevel "><div dir="ltr" style="padding-left: 19px;"><a href="http://dazuma.github.io/" class="sites-navigation-link topLevel" target="_blank">Github Projects</a></div></li></ul></div></div>
</td>
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/daniel-azuma.com/blog/articles/georails/part-5">Sign in</a>|<a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a>|<a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a>|<span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>

<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/d3f591/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
    
        sites.core.Analytics.createTracker();
        sites.core.Analytics.trackPageview();
      
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("2bd", "Articles", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_2bd');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://gsite.daniel-azuma.com/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
 //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          if (webspace.features.siteNotice) {
            JOT_setupNoticeManager();
          }
        </script>
<script type="text/javascript">
              JOT_postEvent('renderPlus', null, 'sites-chrome-main');
            </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
