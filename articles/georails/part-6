<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var b=window,e="chrome",g="tick",h="wtsrt_",l="tbsd_",m="tbnd_",n="start",p="_wtsrt",q="_tbnd",r="CSI/";(function(){function k(a){this.t={};this.tick=function(a,d,c){this.t[a]=[void 0!=c?c:(new Date).getTime(),d];if(void 0==c)try{b.console.timeStamp(r+a)}catch(f){}};this[g](n,null,a)}var a;b.performance&&(a=b.performance.timing);var s=a?new k(a.responseStart):new k;b.jstiming={Timer:k,load:s};if(a){var d=a.navigationStart,f=a.responseStart;0<d&&f>=d&&(b.jstiming.srt=f-d)}if(a){var c=b.jstiming.load;0<d&&f>=d&&(c[g](p,void 0,d),c[g](h,p,f),c[g](l,h))}try{a=null,b[e]&&b[e].csi&&(a=Math.floor(b[e].csi().pageT),
c&&0<d&&(c[g](q,void 0,b[e].csi().startE),c[g](m,q,d))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,c&&0<d&&(c[g](q,void 0,b.external.startE),c[g](m,q,d))),a&&(b.jstiming.pt=a)}catch(t){}})(); })()
</script>
<link rel="shortcut icon" type="image/x-icon" href="//www.google.com/images/icons/product/sites-16.ico" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/d3f591/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d=window,e="length",h="",k="__duration__",l="function";function m(c){return document.getElementById(c)}d.byId=m;function n(c){return c.replace(/^\s+|\s+$/g,h)}d.trim=n;var p=[],q=0;d.JOT_addListener=function(c,a,b){var f=new String(q++);c={eventName:c,handler:a,compId:b,key:f};p.push(c);return f};d.JOT_removeListenerByKey=function(c){for(var a=0;a<p[e];a++)if(p[a].key==c){p.splice(a,1);break}};d.JOT_removeAllListenersForName=function(c){for(var a=0;a<p[e];a++)p[a].eventName==c&&p.splice(a,1)};
d.JOT_postEvent=function(c,a,b){var f={eventName:c,eventSrc:a||{},payload:b||{}};if(d.JOT_fullyLoaded)for(a=p[e],b=0;b<a&&b<p[e];b++){var g=p[b];g&&g.eventName==c&&(f.listenerCompId=g.compId||h,(g=typeof g.handler==l?g.handler:d[g.handler])&&g(f))}else d.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};d.JOT_delayedEvents=[];d.JOT_fullyLoaded=!1;
d.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var f=0;60<=b&&(b/=60,f=2);2<=b&&f++;return a?d.JOT_siteRelTimeStrs[f].replace(k,Math.floor(b)):d.JOT_userRelTimeStrs[f].replace(k,Math.floor(b))}; })()
</script>
<script>


var webspace = {"scottyUrl":"/_/upload","isConsumer":false,"canPublishScriptToAnyone":true,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"sharingUrlPrefix":"/_/sharing","csiReportUri":"http://csi.gstatic.com/csi","sharingPolicy":"OPENED","analyticsAccountId":"","baseUri":"","name":"blog","domain":"daniel-azuma.com","features":{"horizontalNavLayout":true,"asyncPermanentDelete":false,"ritzSupport":true,"folderEmbed":true,"moreBackgroundTweaks":true,"flipFolderUrls":true,"animateNavigation":true,"driveInFileCabinet":true,"skiThemeIsDefault":true,"pdfEmbedSupport":false,"animateToc":true,"siteChromeSidebarWidgetsEditDialog":true,"canonicalLinkTagInHead":true,"analyticsTrackingForCorp":false,"driveImageEmbed":true,"siteChromeSystemFooterDialog":true,"plusOneButtonOptions":true,"plusOneButton":true,"adSenseDeprecate":true,"photoAlbumsInOnePick":true,"docosHideNotificationSettings":true,"helpBox":true,"siteNotice":true,"skiTheme":true,"siteChromeDialogsToolbar":true,"ritzChartSupport":true,"plusBadge":false,"siteChromeHorizontalNavigationDialog":true,"youTubeEmbedSize":true,"adSenseDeprecateMsg":true,"htmlEmbed":true,"plusPost":true,"photoAlbumsGPlusUrlSupport":true,"siteChromeHeaderDialog":true,"fileCabinetOptions":true,"sitesLoveFixes":true},"adsensePublisherId":null,"gvizVersion":1,"siteTitle":"Daniel Azuma","pageSharingId":"jotspot_page","plusPageId":"","onepickBaseUrl":"https://docs.google.com","siteNoticeRevision":null,"termsUrl":"http://sites.google.com/site/sites/system/app/pages/meta/terms?apps\u003d1","enableAnalytics":false,"isPublic":true,"siteNoticeMessage":null,"plusPageUrl":"","homePath":"/","sharingId":"jotspot","isAdsenseEnabled":true,"adsensePromoClickedOrSiteIneligible":true,"isStartPageEnabled":true,"domainAnalyticsAccountId":""};



webspace.gadgets = {"baseUri":"/system/app/pages/gadgets"};


webspace.user = {"uid":"","renderMobile":false,"primaryEmail":"guest","sessionIndex":"","namespaceUser":false,"displayNameOrEmail":"guest","namespace":"","hasAdminAccess":false,"guest_":true,"keyboardShortcuts":true,"domain":"","hasWriteAccess":false,"dasherUser":false,"userName":"guest"};

webspace.page = {"canDeleteWebspace":null,"locale":"en","state":"","wuid":"wuid:gx:7c72159f0815753d","pageInheritsPermissions":null,"timeZone":"America/Los_Angeles","properties":{},"type":"text","canChangePath":true,"parentWuid":"wuid:gx:63933589a24d6669","revision":8,"title":"Part 6","isRtlLocale":false,"bidiEnabled":false,"siteLocale":"en","name":"part-6","path":"/articles/georails/part-6","isSiteRtlLocale":false,"parentPath":"/articles/georails"};
webspace.page.breadcrumbs = [{"title":"Articles","dir":"ltr","path":"/articles","deleted":false},{"title":"GeoRails","dir":"ltr","path":"/articles/georails","deleted":false},{"title":"Part 6","dir":"ltr","path":"/articles/georails/part-6","deleted":false}];


webspace.editorResources = {
  text: [
    'http://www.gstatic.com/sites/p/d3f591/system/js/codemirror.js',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/codemirror_css.css',
    'http://www.gstatic.com/sites/p/d3f591/system/js/trog_edit__en.js',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/trogedit.css',
    '/_/rsrc/1399440112000/system/app/css/editor.css',
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/codeeditor.css',
    '/_/rsrc/1399440112000/system/app/css/camelot/editor-jfk.css'
  ],
  sitelayout: [
    'http://www.gstatic.com/sites/p/d3f591/system/app/css/sitelayouteditor.css'
  ]
};

var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/d3f591/system/app/images/cleardot.gif';


var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];


webspace.siteTemplateId = false;


webspace.page.currentTemplate = {"title":"Web Page","path":"/system/app/pagetemplates/text"};



var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Part 6 - Daniel Azuma" />
<meta itemprop="name" content="Part 6 - Daniel Azuma" />
<meta property="og:title" content="Part 6 - Daniel Azuma" />
<style type="text/css">
      
      @font-face {
  font-family: 'Limelight';
  font-style: normal;
  font-weight: 400;
  src: local('Limelight'), url('//themes.googleusercontent.com/static/fonts/limelight/v5/kD_2YDkzv1rorNqQ2oFK5qCWcynf_cDxXwCLxiixG1c.ttf') format('truetype');
}

    
    </style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/d3f591/system/app/themes/simple/standard-css-simple-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1399440112000/system/app/css/overlay.css?cb=simple20a960px158210goog-ws-nav-rightnone30topstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1399440112000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Part 6 - Daniel Azuma</title>
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<script src="//www.gstatic.com/caja/5678/caja.js"> </script>
<script src="http://www.gstatic.com/sites/p/d3f591/system/js/jot_caja.js"> </script>
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="sites-chrome-header-valign-top" style="height: 158px"><div class="sites-header-cell-buffer-wrapper"><h2></h2></div></td><td class="sites-layout-searchbox sites-chrome-header-valign-top"><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container">
<div class="sites-header-nav"><ul class="sites-header-nav-container-tabs"><li class="unselected"><a class="sites-navigation-link unselected" href="/updates">Home</a></li><li class="unselected"><a class="sites-navigation-link unselected" href="/contact">Contact</a></li></ul><div style="clear: both;"></div></div>
</td>
</tr>
</table> 
</div> 
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-canvas-wrapper">
<div id="sites-canvas">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="display: none;">
<A dir="ltr" href="/articles">Articles</A>‎ &gt; ‎<A dir="ltr" href="/articles/georails">GeoRails</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="display: none;" align="left">
<span id="sites-page-title" dir="ltr">Part 6</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><h1><a name="TOC-Geo-Rails-Part-6:-Scaling-Spatial-Applications"></a>Geo-Rails Part 6: Scaling Spatial Applications</h1>
<p><em>Originally published Jan 2, 2012</em></p>
<p>
Scaling, scaling, scaling. Can Rails really scale? It's been a source of FUD and the butt of <a href="http://canrailsscale.com/" target="_blank" title="Can Rails Scale - Joke">running jokes</a>. But scaling is a serious matter when it comes to large data sets, and it's something we need to pay attention to in the geospatial realm where big data is commonplace.
</p>
<p>
In this week's article, I'll go over the basic issues every geospatial programmer should know about scaling, and provide tips for writing your geospatial Rails application so it doesn't fall over when you go national. We will cover:
</p>
<ul>
<li>The bottom line regarding scaling</li>
<li>Building spatial indexes for your database</li>
<li>Writing queries to take advantage of indexes</li>
<li>Simplification and segmentation of large objects</li>
</ul>
<p>
This is part 6 of my continuing series of articles on geospatial programming in Ruby and Rails. For a list of the other installments, please visit <a href="http://daniel-azuma.com/articles/georails" target="_blank" title="Geo-Rails series">http://daniel-azuma.com/articles/georails</a>.
</p>
<h2><a name="TOC-Scaling-is-complex-but-not-difficult"></a>Scaling is complex but not difficult</h2>
<p>
Scaling is a high-profile issue. We all notice when our blog gets slashdotted, and when Twitter or Amazon goes down it makes national news. Failures happen to everyone, and seem almost inevitable. Are they?
</p>
<p>
Now, I don't want to downplay the complexity of the scaling task, but we do have to start with an important observation. Scaling, in its essence, is a solved problem. The techniques involved have been well-understood for decades. We all learned about logarithmic searching, branch and bound, and similar algorithms in our computer science classes. And as web developers, we should already know what these algorithms look like in practice: database indexes, sharding, caching, replication, load balancing, and so forth.
</p>
<p>
So why the hoopla?
</p>
<p>
Because scaling, though a solved problem, is not an <em>automatically</em> solved problem. It requires our attention. More to the point, it requires that we understand every aspect of the system we are building, how the various components work and how they interact. If we need our database to scale, at some level we need to understand how it works, how we're using it, and thus what we need to <em>do</em> to make it scale.
</p>
<p>
This is probably the main reason why Rails has historically had a negative reputation about scaling. Rails purports to make web development simple. But that's a bit misleading. If you think about it, a website is a complex system with a lot of moving parts: the network, the server, the MVC control flow, databases, caches, client-side code, control flow from one page to another, interactions with external systems, security layers..., and that doesn't even include your application logic with all of its complexities. It's hardly simple. Rails tries to deal with this complexity by hiding elements, at least partly. It hides the database behind ActiveRecord, and in doing so trains us not to think about the database. But that's a deceit. We have to think about the database if we're going to scale it.
</p>
<p>
And that is one of the key motivations behind this entire series. I've heard some comments that this material is difficult, that there's no <em>TL;DR</em>. Yes, the material is difficult, and I'm not going to try to hide or gloss over that fact. I could try to make geospatial programming really easy, creating a one-size-fits-all tool or recipe for everyone to cargo-cult. But that is the wide road that leads to destruction. Eventually, you'll need to figure out how to scale, and at that time, if you don't have some understanding of what's going on under the hood, you'll get very stuck very quickly.
</p>
<p>
Now, that said, dealing with geospatial features does not fundamentally change the scaling task. Scaling is still a solved problem. As we prepare to scale our applications, there is a well-known, systematic process we all go through. We measure, find the bottlenecks, apply well-understood techniques to address those bottlenecks, and repeat. It can be a tedious process, and (believe me, I know) it is sometimes difficult to sell our business partners on the fact that we need to spend time on it before it's too late. But it's not like we don't know what we're doing. Scaling is complex, but not difficult. It simply requires that we have a general understanding of how spatial data works.
</p>
<p>
So, sermon over, let's dive in.
</p>
<h2><a name="TOC-About-spatial-database-indexes"></a>About spatial database indexes</h2>
<p>
Spatial data is often big data, and as with any big data, our basic scaling task involves making it smaller.
</p>
<p>
In a database, this is generally accomplished by judicious use of <em>indexes</em>. An index provides a fast way to look up data by some criteria, without having to read and compare against every single row. For example, if your table has a million rows, each identified by a numeric ID, you can generally speed up ID lookups by creating an index on that column.
</p>
<p>
Similarly, <em>spatial database indexes</em> can accelerate queries that include spatial criteria. If your million-row table also contains latitude-longitude coordinate, and you want to find rows whose coordinate falls within a certain region, you should consider building a spatial index on the coordinate column. This allows your spatial search to avoid checking every row in the database, thus speeding up your queries.
</p>
<p>
The important thing to understand about spatial indexes is that although they are conceptually the same as "standard" database indexes, they are implemented differently under the hood. In most databases, a simple index on an ID column will use an algorithm known as a <em>B-tree</em>. Such an index relies on a global ordering of the data, and builds a balanced binary tree, which, as we remember from computer science, lets us do lookups in logarithmic time.
</p>
<p>
Spatial data, however, has some important differences from normal scalar data. A simple numeric ID is an infinitesimal point on a one-dimensional number line, whereas a polygon is a finite area on a two-dimensional surface. For data that covers finite areas or lives in more than one dimension, a B-tree does not work. We have to resort to a more complex algorithm, usually a variant on what is known as an <em>R-tree</em>.
</p>
<p>
I'll save the gory details on R-trees for a later article on spatial index design, but there is one upshot you'll need to understand: spatial indexes are heavier and more expensive than standard indexes. An R-tree takes up more space in memory and on disk than a similarly-sized B-tree. Queries against an R-tree can be a little slower than against a B-tree, and R-tree updates can be considerably slower. However, R-trees still provide logarithmic-time queries, and so will still give you speed-ups in many situations. So the usual database mantra still applies, and indeed goes double for spatial indexes: Index your common queries but don't index everything. And of course, Measure, Measure, Measure.
</p>
<p>
Because R-tree updates can be slow, it is also usually a good idea to remove or disable a spatial index if you are going to be loading a lot of data, and then turn it back on once you are done. In this way, you pay the cost of building the index only once at the end, rather than having to incrementally update it on every insert.
</p>
<h2><a name="TOC-Creating-and-using-spatial-indexes"></a>Creating and using spatial indexes</h2>
<p>
Because a spatial index is constructed differently from most indexes, creating one usually requires a special syntax. For a Rails project, you can usually let RGeo's ActiveRecord adapters handle this for you. Create a spatial index in a migration simply by providing the <code>:spatial</code> attribute. Following is a snippet from a migration that creates a "counties" table with polygons, along with a spatial index on the polygons. (Here we'll use geometric column with the "NAD83 / Washington North" projection, which has SRID 2285---see <a href="http://daniel-azuma.com/articles/georails/part-4" target="_blank" title="Geo-Rails part 4">part 4</a>. If you're using PostGIS, indexes do work for the geographic type, but have some limitations.)
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">create_table :counties do |t|
  t.string :name
  t.polygon :poly, :srid =&gt; 2285
end
change_table :counties do |t|
  t.index :poly, :spatial =&gt; true
end</pre>
<p>
If you are managing your schema manually, you'll need to use the database's particular syntax. In <a href="http://www.postgis.org/" target="_blank" title="PostGIS">PostGIS</a>, spatial indexes use the GIST framework, so you denote a spatial index with "USING gist":
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">CREATE INDEX "counties_poly_idx" ON "counties" USING gist ("poly");</pre>
<p>
<a href="http://dev.mysql.com/" target="_blank" title="MySQL">MySQL</a>'s spatial extension defines a separate index type:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">CREATE SPATIAL INDEX `counties_poly_index` ON `counties` (`poly`);</pre>
<p>
In <a href="http://www.gaia-gis.it/fossil/libspatialite/index" target="_blank" title="SpatiaLite">SpatiaLite</a>, a spatial index is actually a separate table that you must join to. Creating a spatial index involves calling a special function provided by the SpatiaLite library:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">SELECT CreateSpatialIndex('counties', 'poly');</pre>
<p>
Once you've created a spatial index, it is usually a good idea to verify that your queries will take advantage of it. You'll want to make sure the database's <em>query planner</em>, the component that analyzes a query and decides how to attack it, is producing an optimal plan. This is generally good practice for all your database design, but more so for spatial queries because they are less commonly used, and query planners do not always do as good a job with them as we would like.
</p>
<p>
Your best tool for interacting with the query planner, whether or not you're using a spatial database, is <code>EXPLAIN</code>. This SQL command takes a query and returns the query planner's plan of attack for that query, usually including which indexes it intends to use and its estimate of how expensive the query will be.
</p>
<p>
For most databases, you can invoke the EXPLAIN command simply by prefixing your query with "<code>EXPLAIN</code>". For example, using PostGIS, let's see what the query planner does with a query asking for the county containing the Seattle Space Needle:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">EXPLAIN
  SELECT "name" FROM "counties" WHERE
    ST_Intersects("poly", ST_GeomFromEWKT('SRID=2285;POINT(1266457.58 230052.50)'));</pre>
<p>
Postgres will return a query plan that looks something like this:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">QUERY PLAN
----------------------------------------------------------------------------------------------
Index Scan using counties_poly_idx on counties (cost=0.00..8.52 rows=1 width=68)
  Index Cond: (poly &amp;&amp; '0101000020ED08000048E17A94195333410000000024150C41'::geometry)
  Filter: _st_intersects(poly, '0101000020ED08000048E17A94195333410000000024150C41'::geometry)</pre>
<p>
Note that it's using the "<code>counties_poly_idx</code>" index that we created. PostGIS is currently quite good about knowing how to use a spatial index for most queries. With the EXPLAIN command, we can be sure this query will use our spatial index for maximum efficiency.
</p>
<h2><a name="TOC-Optimizing-difficult-queries-in-PostGIS"></a>Optimizing difficult queries in PostGIS</h2>
<p>
Unfortunately, there are a few cases when the query planner won't be able to figure out by itself that an index is useful. For example, suppose we want to perform a sanity check of our counties database, making sure we don't have any overlapping polygons. More precisely, while we expect that county polygons will "touch"---that is, share boundaries---we don't want counties to actually share <em>interior</em> points. That could mean a problem in our data.
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391971939335/articles/georails/part-6/county_boundaries.png" />
</p>
<p>
Unfortunately, PostGIS doesn't provide this kind of "interior intersection" function out of the box. The <code>ST_Intersects</code> function we used earlier will flag the "touch" case as well, and we don't want that.
</p>
<p>
But we <em>can</em> build "interior intersection" using the function <code>ST_Relate</code>. This powerful function lets you test a wide variety of relationships using the <em>Dimensionally Extended Nine-Intersection Model</em>. I won't cover this model in detail for now---you can read about it in the <a href="http://www.opengeospatial.org/standards/sfa" target="_blank" title="OGC Simple Feature Access spec">Simple Features Spec</a>. For our purposes, what's important is that, by giving it a particular specification string, "<code>T********</code>", it can implement the relationship we want to test.
</p>
<p>
Unfortunately, because <code>ST_Relate</code> is such a powerful and general tool, the query planner can't optimize it very well, and tends to fall back on the lowest common denominator, which is sequential scan.
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">EXPLAIN
  SELECT c1.name, c2.name FROM counties AS c1 INNER JOIN counties AS c2
    ON c1.id != c2.id AND ST_Relate(c1.poly, c2.poly, 'T********');</pre>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">QUERY PLAN
----------------------------------------------------------------------
Nested Loop (cost=0.00..10372.17 rows=229633 width=64)
  Join Filter: st_relate(c1.poly, c2.poly, 'T********'::text)
  -&gt; Seq Scan on counties c1 (cost=0.00..18.30 rows=830 width=68)
  -&gt; Materialize (cost=0.00..22.45 rows=830 width=68)
       -&gt; Seq Scan on counties c2 (cost=0.00..18.30 rows=830 width=64)</pre>
<p>
Ouch! That's an unfortunate query plan. It does nested sequential scans, comparing every county polygon with every other county polygon, an <em>n-squared</em> operation. In a table with thousands of counties, this can be slow.
</p>
<p>
But it turns out we can do better. The "interior intersection" operation actually <em>can</em> be optimized using the index. The query planner doesn't realize this, so we need to give it some help.
</p>
<p>
Here a bit of trivia about spatial indexes will help us. In general, the "native" operation for an R-tree index is <em>bounding box intersection</em>. It can take the bounding box of an input geometry, and determine which geometries in the table have bounding boxes that intersect the input. At the most basic level, the query planner for PostGIS works by looking for opportunities to apply this native operation. It asks, "How can I reduce the search space by applying a bounding box intersection?"
</p>
<p>
In our first example above, when we used <code>ST_Intersects</code> to find the polygon containing the Space Needle, the query planner reasoned thus: <em>Every time two geometries intersect, their bounding boxes also intersect. So I can add a bounding box intersection and not change the result of the query. I like bounding box intersections because they let me use the index.</em> So actually what happened behind the scenes, was that PostGIS rewrote our query from:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">SELECT "name" FROM "counties" WHERE
  ST_Intersects("poly", ST_GeomFromEWKT('SRID=2285;POINT(1266457.58 230052.50)'));</pre>
<p>
to:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">SELECT "name" FROM "counties" WHERE
  "poly" &amp;&amp; ST_GeomFromEWKT('SRID=2285;POINT(1266457.58 230052.50)') AND
  ST_Intersects("poly", ST_GeomFromEWKT('SRID=2285;POINT(1266457.58 230052.50)'));</pre>
<p>
...using the PostgreSQL operator for bounding box intersection: "<code>&amp;&amp;</code>". Now, when it creates the actual query plan, it uses the spatial index to optimize the bounding box intersection. Let's take another look at that query plan:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">QUERY PLAN
----------------------------------------------------------------------------------------------
Index Scan using counties_poly_index on counties (cost=0.00..8.52 rows=1 width=68)
  Index Cond: (poly &amp;&amp; '0101000020ED08000048E17A94195333410000000024150C41'::geometry)
  Filter: _st_intersects(poly, '0101000020ED08000048E17A94195333410000000024150C41'::geometry)</pre>
<p>
See the bounding box intersection "&amp;&amp;" in the Index Condition? That wasn't in our original query, but PostGIS rewrote our query and put it there so it could use the index. Pretty clever, PostGIS is.
</p>
<p>
Well, sometimes PostGIS isn't quite clever enough, and we have to give it some help. In our "interior intersection" example, we can improve the query plan by going through this process manually. We reason thus: <em>PostGIS doesn't realize this, but every time two geometries have an "interior intersection" using ST_Relate, their bounding boxes also intersect. So I can add a bounding box intersection and not change the result of the query. Bounding box intersections are good because they let me use the index.</em>
</p>
<p>
So let's manually rewrite our query from:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">SELECT c1.name, c2.name FROM counties AS c1 INNER JOIN counties AS c2
  ON c1.id != c2.id AND ST_Relate(c1.poly, c2.poly, 'T********');</pre>
<p>
to:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">SELECT c1.name, c2.name FROM counties AS c1 INNER JOIN counties AS c2
  ON c1.poly &amp;&amp; c2.poly AND
  c1.id != c2.id AND ST_Relate(c1.poly, c2.poly, 'T********');</pre>
<p>
Now we give this to PostGIS, and <em>voila</em>! The query planner now uses the index:
</p>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">EXPLAIN
  SELECT c1.name, c2.name FROM counties AS c1 INNER JOIN counties AS c2
    ON c1.poly &amp;&amp; c2.poly AND
    c1.id != c2.id AND ST_Relate(c1.poly, c2.poly, 'T********');</pre>
<pre style="padding:6px 20px 6px 20px;background-color:#eee;overflow:auto">QUERY PLAN
----------------------------------------------------------------------------------------
Nested Loop (cost=0.00..296.81 rows=1 width=64)
  Join Filter: st_relate(c1.poly, c2.poly, 'T********'::text)
  -&gt; Seq Scan on counties c1 (cost=0.00..18.30 rows=830 width=68)
  -&gt; Index Scan using counties_poly_idx on counties c2 (cost=0.00..0.32 rows=1 width=68)
       Index Cond: (c1.poly &amp;&amp; c2.poly)</pre>
<p>
This improved plan still does one full sequential scan, because it still has to check every county in the database. But the nested scan, which checks whether that county overlaps any other county, is now accelerated using the index. We've reduced the <em>n-squared</em> query to an <em>n log n</em> query. The computer scientist in us rejoices!
</p>
<p>
Going through this process does require some creativity, and it helps to have a bit of experience. The good news is that PostGIS is smart enough to handle most cases automatically. But you should still make liberal use of the EXPLAIN tool and look carefully at the query plan that is generated, to see if it's doing as well as you think it ought. There may be opportunities to improve your query performance dramatically just by giving it a little bit of help.
</p>
<h2><a name="TOC-Indexing-and-queries-in-MySQL-and-SpatiaLite"></a>Indexing and queries in MySQL and SpatiaLite</h2>
<p>
Generally, I recommend <a href="http://www.postgis.org/" target="_blank" title="PostGIS">PostGIS</a> as an open source spatial database. But there are others out there that you may need to use from time to time, and each one will have its quirks.
</p>
<p>
As we've seen, the spatial extensions to <a href="http://dev.mysql.com" target="_blank" title="MySQL">MySQL</a> do support spatial indexes. However, there are some significant limitations in comparison with PostGIS.
</p>
<p>
First, spatial indexes currently work only on MyISAM tables. This means you can't use spatial indexes and get the transaction safety benefits of InnoDB on the same table. Ugh.
</p>
<p>
Second, MySQL supports only a very limited set of spatial relationship functions. In particular, nearly all MySQL's functions work on bounding boxes (which MySQL calls <em>Minimum Bounding Rectangles</em>, or <em>MBR</em>) rather than the geometry itself. So for example, MySQL's <code>Intersects</code> function is actually only an alias to <code>MBRIntersects</code>, which tests the bounding boxes for intersection. If you want to test actual geometric intersection, you'll have to do some post-filtering on the result set (which you can do using <a href="http://dazuma.github.io/rgeo" target="_blank" title="RGeo">RGeo</a>).
</p>
<p>
I generally don't recommend using MySQL Spatial unless you're already using MySQL. But then I typically don't recommend using MySQL in general either...
</p>
<p>
<a href="http://www.gaia-gis.it/fossil/libspatialite/index" target="_blank" title="Spatialite">SpatiaLite</a> is a set of spatial extensions to the popular <a href="http://www.sqlite.org/" target="_blank" title="SQLite">SQLite</a> database. I haven't used SpatiaLite much. It does seem to have a fairly complete feature set, at least in comparison with MySQL Spatial, though it doesn't compare in maturity with PostGIS.
</p>
<p>
Spatial indexes in SpatiaLite are a bit of a pain, however. They are implemented as a separate set of managed join tables tied to your main table using triggers. All this is handled fairly transparently, except for queries. When you want to write a query that takes advantage of a spatial index in SpatiaLite, you must explicitly join to the index table.
</p>
<p>
For the sake of space, I won't go into the details here. Instead, I highly recommend an excellent online publication by the author of SpatiaLite, the <a href="http://www.gaia-gis.it/gaia-sins/spatialite-cookbook/index.html" target="_blank" title="SpatiaLite Cookbook">SpatiaLite Cookbook</a>, which serves as the user's manual for SpatiaLite, and provides a number of very helpful examples.
</p>
<h2><a name="TOC-Simplifying-and-segmenting-data"></a>Simplifying and segmenting data</h2>
<p>
But wait---there's more!
</p>
<p>
Remember that the basic scaling task is to make big data smaller. If we have big data, we try to do clever things, such as applying indexes, so that we don't have to analyze all the data at once.
</p>
<p>
Now, there are two ways in which spatial data can be "big". First, there may be a lot of objects, lots of rows. In this case, we can often speed up queries by adding a spatial index, as we have seen.
</p>
<p>
However, individual objects can also be "big", particularly when you're dealing with polygons. Take our table of county polygons. Some county boundaries are simple polygons with just a few sides, but many others have complex, crinkly boundaries that follow rivers, coastlines, mountain divides, or other natural features. The number of sides in such polygons can quickly rise into the thousands or more. When you want to compute, say, an intersection with such a polygon, it can be slow.
</p>
<p>
There are several different strategies you can use to address this problem. I'm just going to summarize a couple of the important ones here. But first I need to emphasize one thing. There is no one-size-fits-all solution. Each approach has its pros and cons, and your choice will depend on the requirements of your particular application.
</p>
<p>
To this end, <em>measurement</em> is absolutely critical. Before, during, and after applying any optimization technique, run a benchmark and make sure that (1) you're addressing the right problem, and (2) the performance is going in the right direction. This is doubly important when dealing with spatial data, because the algorithms involved are somewhat more complex, and it may surprise you what's fast and what's slow.
</p>
<p>
There are two general techniques for dealing with large polygons: <em>simplification</em> and <em>segmentation</em>.
</p>
<p>
<strong>Simplification</strong> can be applied when you're more concerned with speed than accuracy. For example, you might have a polygon with a thousand sides, but if you're going to be displaying it in a relatively small area on a map, or you're running some spatial queries where you don't care too much if you're a little off, then you can probably get away with an approximation of the polygon with fewer sides.
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391971950233/articles/georails/part-6/simplification.png" />
<br />
<em>An example of polygon simplification for part of the coast of France. (Credit: http://vis4.net/blog/posts/rendering_country_maps/)</em>
</p>
<p>
There are a number of polygon simplification techniques out there, useful for different circumstances. I don't have space here for a full discussion, but I may write a specialized article on simplification at a later time, because it's an interesting (and sometimes tricky) problem.
</p>
<p>
<strong>Segmentation</strong> is often useful for speeding up queries against big polygons, when you care not about the shape of the polygon itself but merely whether you're intersecting it. Segmentation, for example, might be useful in our county boundary example.
</p>
<p>
The idea is to break up large polygons into smaller polygons that can be stored in separate rows in your database. That is, we trade "width" of the data (i.e. how big each object is, in terms of number of vertices) for "length" (i.e. how many objects there are). Since we have spatial indexes that mitigate big "length", this trade-off can be a win for us.
</p>
<p>
There are many ways to break up a large polygon. The simplest approach, usually good enough in practice, is to perform <em>recursive four-to-one subdivision</em>. Don't be scared off by the name; it's actually quite straightforward. The idea is to take your large polygon with many sides, and split it down the middle horizontally and vertically. This will typically result in four polygons, each covering about a quarter of the area and containing about a quarter of the number of sides:
</p>
<p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1391971956834/articles/georails/part-6/split.png" />
<br />
<em>One four-to-one split of a province in France</em>
</p>
<p>
Now, if any of the four polygons still has too many sides, you can do the same thing again, recursively, and so forth until you reach a number of sides that you're comfortable with. Once you're done, the <em>union</em> of all the resulting polygons will still be your original polygon. So, in our counties example, a county now <code>has_many</code> polygons, and to find the county containing a particular point, do a spatial query for the polygon containing that point and map back to the county.
</p>
<p>
So how deeply should you segment a polygon? What's the "sweet spot" in the number of sides? That's where you have to test and measure, because it will depend on many factors. In one recent project in which I did some polygon segmentation, I measured the optimal number of sides between three and five hundred. But your mileage will vary.
</p>
<h2><a name="TOC-Where-to-go-from-here"></a>Where to go from here</h2>
<p>
It is worth diving into the manual for your spatial database for tips on the effective use of spatial indexes. The PostGIS manual is <a href="http://www.postgis.org/documentation" target="_blank" title="PostGIS documentation">online</a>.
</p>
<p>
EXPLAIN is a very powerful tool for studying and optimizing your database performance in general, not only when you're working with spatial data. I highly recommend getting familiar with using it in your database. For PostgreSQL, a good place to start is the <a href="http://www.postgresql.org/docs/current/static/using-explain.html" target="_blank" title="Using Explain in PostgreSQL">Using Explain</a> page in the manual. SQLite and MySQL also have sections in their manuals. Additionally, it looks like Rails 3.2 will <a href="http://weblog.rubyonrails.org/2011/12/6/what-s-new-in-edge-rails-explain" target="_blank" title="Explain in Rails 3.2">include</a> some useful EXPLAIN-based tools out of the box.
</p>
<p>
This week's article didn't include a lot of code. This was because I had a lot of material to get through, and I decided it was more important to cover the concepts at this stage, rather than encourage code cargo-culting. In next week's article, however, I'll go through a fully worked example, with code, that mirrors an actual task I recently had to do for my job at <a href="http://www.pirq.com/" target="_blank" title="Pirq">Pirq</a>.
</p>
<p>
Until then, have fun and let's bring Rails down to earth!
</p>
<p>
<em>This is part 6 of my continuing series of articles on geospatial programming in Ruby and Rails. For a list of the other installments, please visit <a href="http://daniel-azuma.com/articles/georails" target="_blank" title="Geo-Rails series">http://daniel-azuma.com/articles/georails</a>.</em>
</p></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
</div>
</div> 
</td> 
<td id="sites-chrome-sidebar-right" class="sites-layout-sidebar-right" style="width:210px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_20715116360224783" class="sites-embed"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><p style="text-align:center">
<img border="1" src="http://gsite.daniel-azuma.com/_/rsrc/1392135198793/updates/mug_small.jpg" />
</p>
<p style="text-align:center">
Daniel Azuma is a software engineer in the Seattle area.</p></div></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_2bd" class="sites-embed"><div class="sites-embed-content sites-sidebar-nav"><ul jotId="navList" class="has-expander"><li class="topLevel nav-first parent " wuid="gx:77f758e02286adc5"><div dir="ltr" style="padding-left: 0px;"><div class="expander"></div><a href="/articles" jotId="wuid:gx:77f758e02286adc5" class="sites-navigation-link topLevel">Articles</a></div><ul class="has-expander"><li class="parent " wuid="gx:63933589a24d6669"><div dir="ltr" style="padding-left: 19px;"><div class="expander"></div><a href="/articles/georails" jotId="wuid:gx:63933589a24d6669" class="sites-navigation-link">GeoRails</a></div><ul class="has-expander"><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-1" jotId="wuid:gx:21263add3704d85a" class="sites-navigation-link">Part 1</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-2" jotId="wuid:gx:583b2472f184df59" class="sites-navigation-link">Part 2</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-3" jotId="wuid:gx:2215c067d09b656d" class="sites-navigation-link">Part 3</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-4" jotId="wuid:gx:736c4f9a4a910dc3" class="sites-navigation-link">Part 4</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-5" jotId="wuid:gx:71e83b60478e8b52" class="sites-navigation-link">Part 5</a></div></li><li class=""><div class="current-bg" jotId="wuid:gx:7c72159f0815753d" dir="ltr" style="padding-left: 57px;">Part 6</div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-7" jotId="wuid:gx:538f6eeef4c76cfc" class="sites-navigation-link">Part 7</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-8" jotId="wuid:gx:7417ef859fc351a7" class="sites-navigation-link">Part 8</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/georails/part-9" jotId="wuid:gx:4fae9206819b4a64" class="sites-navigation-link">Part 9</a></div></li></ul></li><li class="parent closed " wuid="gx:77f18de4f94a3c47"><div dir="ltr" style="padding-left: 19px;"><div class="expander"></div><a href="/articles/talks" jotId="wuid:gx:77f18de4f94a3c47" class="sites-navigation-link">Talks</a></div><ul class="has-expander"><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/talks/railsconf-2012" jotId="wuid:gx:6a4476d67668a24a" class="sites-navigation-link">Geospatial Analysis With Rails (RailsConf 2012)</a></div></li><li class=""><div dir="ltr" style="padding-left: 57px;"><a href="/articles/talks/railsconf-2013" jotId="wuid:gx:53413222cba48516" class="sites-navigation-link">Humanity on Rails (RailsConf 2013)</a></div></li></ul></li></ul></li><li class="topLevel "><div dir="ltr" style="padding-left: 19px;"><a href="http://dazuma.github.io/" class="sites-navigation-link topLevel" target="_blank">Github Projects</a></div></li></ul></div></div>
</td>
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/daniel-azuma.com/blog/articles/georails/part-6">Sign in</a>|<a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a>|<a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a>|<span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>

<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/d3f591/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
    
        sites.core.Analytics.createTracker();
        sites.core.Analytics.trackPageview();
      
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("2bd", "Articles", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_2bd');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://gsite.daniel-azuma.com/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
 //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          if (webspace.features.siteNotice) {
            JOT_setupNoticeManager();
          }
        </script>
<script type="text/javascript">
              JOT_postEvent('renderPlus', null, 'sites-chrome-main');
            </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
